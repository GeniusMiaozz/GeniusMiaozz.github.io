<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://geniusmiaozz.github.io</id>
    <title>GeniusMiao&apos;s blog.</title>
    <updated>2020-04-10T15:40:40.289Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://geniusmiaozz.github.io"/>
    <link rel="self" href="https://geniusmiaozz.github.io/atom.xml"/>
    <subtitle>醉梦不知天在水，满船新梦压清河。</subtitle>
    <logo>https://geniusmiaozz.github.io/images/avatar.png</logo>
    <icon>https://geniusmiaozz.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, GeniusMiao&apos;s blog.</rights>
    <entry>
        <title type="html"><![CDATA[C/C++复习总结]]></title>
        <id>https://geniusmiaozz.github.io/post/ccfu-xi/</id>
        <link href="https://geniusmiaozz.github.io/post/ccfu-xi/">
        </link>
        <updated>2020-04-07T05:55:45.000Z</updated>
        <content type="html"><![CDATA[<h1 id="cc复习">C/C++复习</h1>
<h2 id="基础数据结构类型">基础数据/结构/类型</h2>
<h3 id="常量">常量</h3>
<ul>
<li>
<p>整数常量：前缀 <code>0X</code> 或 <code>0x</code> 代表十六进制，前缀 <code>0</code> 表示八进制，不带前缀默认为十进制；后缀 <code>U/u</code> 代表无符号整数，<code>L/l</code> 代表长整数。</p>
</li>
<li>
<p>字符常量：<code>\a</code> 为警报铃声，<code>\b</code> 为退格键，<code>\f</code> 为换页符，<code>\v</code> 为垂直制表符，<code>\ooo</code> 为一到三位的八进制数，<code>\xhhh</code> ......为一道多个数字的十六进制数。</p>
</li>
<li>
<p>对于常量的定义，多推荐为大写字母的形式。</p>
</li>
</ul>
<h3 id="内置类型">内置类型</h3>
<ul>
<li>
<p>各种变量类型在内存中存储值时需要占用的位数：</p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">字节数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>char</code></td>
<td style="text-align:center"><code>1</code></td>
</tr>
<tr>
<td style="text-align:center"><code>int</code></td>
<td style="text-align:center"><code>4</code></td>
</tr>
<tr>
<td style="text-align:center"><code>short int</code></td>
<td style="text-align:center"><code>2</code></td>
</tr>
<tr>
<td style="text-align:center"><code>long int</code></td>
<td style="text-align:center"><code>8</code></td>
</tr>
<tr>
<td style="text-align:center"><code>float</code></td>
<td style="text-align:center"><code>4</code></td>
</tr>
<tr>
<td style="text-align:center"><code>double</code></td>
<td style="text-align:center"><code>8</code></td>
</tr>
<tr>
<td style="text-align:center"><code>long double</code></td>
<td style="text-align:center"><code>16</code></td>
</tr>
</tbody>
</table>
</li>
</ul>
<h3 id="局部变量与全局变量">局部变量与全局变量</h3>
<ul>
<li>
<p>当局部变量被定义时，系统不会对其初始化。定义全局变量时，会自动初始化为下列值：</p>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">初始化默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>int</code></td>
<td style="text-align:center"><code>0</code></td>
</tr>
<tr>
<td style="text-align:center"><code>float</code></td>
<td style="text-align:center"><code>0</code></td>
</tr>
<tr>
<td style="text-align:center"><code>double</code></td>
<td style="text-align:center"><code>0</code></td>
</tr>
<tr>
<td style="text-align:center"><code>char</code></td>
<td style="text-align:center"><code>'\0'</code></td>
</tr>
<tr>
<td style="text-align:center"><code>pointer</code></td>
<td style="text-align:center"><code>NULL</code></td>
</tr>
</tbody>
</table>
</li>
</ul>
<h3 id="浮点数">浮点数</h3>
<ul>
<li>浮点数的比较不能直接使用 <code>'='</code> 进行判断，可以使用减法，当差值在精度允许范围内（比如 <code>0.0000001</code>）即可视为两个浮点数相等。</li>
</ul>
<h3 id="字符串">字符串</h3>
<ul>
<li>对于<code>char str1[]</code> 和 <code>char str2[]</code>，如果二者赋值相同，由于 <code>str1</code> 和 <code>str2</code> 初始地址不同，<code>str1 != str2</code>；对于<code>char *str1</code> 和 <code>char *str2</code>，如果二者赋值相同，相当于二者指向内存中同一段地址，<code>str1 = str2</code>。</li>
</ul>
<h3 id="存储类">存储类</h3>
<ul>
<li>存储类定义 <code>C/C++</code> 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。</li>
</ul>
<h3 id="位域">位域</h3>
<ul>
<li>位域在本质上就是一种结构体类型，只不过其成员按二进制中的每一位分配。</li>
</ul>
<h2 id="内存相关">内存相关</h2>
<h3 id="指针-引用">指针 &amp; 引用</h3>
<h4 id="指针">指针</h4>
<ul>
<li>
<p><code>32</code> 位机器一个指针占 <code>4</code> 字节空间，<code>64</code> 位机器一个指针占 <code>8</code> 字节空间。</p>
</li>
<li>
<p>野指针是指向一个已删除的对象或者未申请访问受限内存区域的指针。</p>
</li>
<li>
<p>数组做为函数的参数传递时，自动退化为同类型指针，指向数组的第一个元素。</p>
</li>
<li>
<p>指针函数：返回值是某一类型指针的函数，如 <code>int *fun()</code>，该函数返回值为一个地址；函数指针：指向某一函数的指针变量可以调用函数，如 <code>int (*fun)() = &amp; fun1</code>。</p>
</li>
<li>
<p>指针数组：一个元素均为某一类型指针的的数组，如 <code>int *p[10]</code>，该数组包含是个 <code>int</code> 类型指针的元素；数组指针：指向数组某个元素地址的指针，如 <code>int (*p) [10]</code>，<code>p</code>指向数组的首地址（首个元素的地址）。</p>
</li>
<li>
<p>智能指针：主要用于管理在堆上分配的内存，它将普通的指针封装为一个栈对象。当栈对象的生存周期结束后，会在析构函数中释放掉申请的内存，从而防止内存泄漏。</p>
</li>
</ul>
<h4 id="引用">引用</h4>
<ul>
<li>
<p>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</p>
</li>
<li>
<p>引用必须在创建时被初始化。指针可以在任何时间被初始化。</p>
</li>
<li>
<p>引用一定不为空，因此相对于指针，它不用检查它所指对象是否为空，这增加了效率。</p>
</li>
</ul>
<h4 id="指针与引用和异同点">指针与引用和异同点</h4>
<ul>
<li>
<p>区别总结：</p>
<ol>
<li>
<p>指针有自己的一块空间，而引用只是一个别名；</p>
</li>
<li>
<p>使用 <code>sizeof</code> 求得的是指针的大小，而引用则是被引用对象的大小；</p>
</li>
<li>
<p>指针可以被初始化为 <code>NULL</code>，而引用必须被初始化且必须是一个已有对象的引用；</p>
</li>
<li>
<p>作为参数传递时，指针需要被解引用才可以对对象进行操作，而直接对引用的修改都会改变引用所指向的对象；</p>
</li>
<li>
<p>可以有 <code>const</code>指针，但是没有 <code>const</code> 引用；</p>
</li>
<li>
<p>指针在使用中可以指向其它对象，但是引用只能是一个对象的引用，不能被改变；</p>
</li>
<li>
<p>指针可以有多级指针（<code>**p</code>），而引用至于一级；</p>
</li>
<li>
<p>指针和引用使用 <code>++</code> 运算符的意义不一样；</p>
</li>
<li>
<p>如果返回动态内存分配的对象或者内存，必须使用指针，引用可能引起内存泄露。</p>
</li>
</ol>
</li>
<li>
<p>指针与引用可以参考如下代码：</p>
<pre><code class="language-C++">int a,b,*p,&amp;r=a;//正确
r = 3;//正确：等价于a=3
int &amp;rr;//出错：引用必须初始化
p = &amp;a;//正确：p中存储a的地址，即p指向a
*p = 4;//正确：p中存的是a的地址，对a所对应的存储空间存入值4
p = &amp;b//正确：p可以多次赋值，p存储b的地址
</code></pre>
</li>
</ul>
<h3 id="内存分配">内存分配</h3>
<ul>
<li>
<p>自上而下为最低内存地址至最高内存地址：</p>
<table>
<thead>
<tr>
<th style="text-align:center">区域</th>
<th style="text-align:center">存放内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">保留区</td>
<td style="text-align:center">系统保留区域</td>
</tr>
<tr>
<td style="text-align:center">程序代码区</td>
<td style="text-align:center">函数代码块的二进制代码，只读</td>
</tr>
<tr>
<td style="text-align:center">常量区</td>
<td style="text-align:center">一般常量、字符串常量，只读</td>
</tr>
<tr>
<td style="text-align:center">全局数据区</td>
<td style="text-align:center">全局变量、静态变量，可读写</td>
</tr>
<tr>
<td style="text-align:center">堆区</td>
<td style="text-align:center">动态分配的数据</td>
</tr>
<tr>
<td style="text-align:center">未被分配的内存</td>
<td style="text-align:center">堆的增长区</td>
</tr>
<tr>
<td style="text-align:center">映射区</td>
<td style="text-align:center">存储动态链接库</td>
</tr>
<tr>
<td style="text-align:center">未被分配的内存</td>
<td style="text-align:center">栈的增长区</td>
</tr>
<tr>
<td style="text-align:center">栈区</td>
<td style="text-align:center">局部变量</td>
</tr>
<tr>
<td style="text-align:center">命令行参数区</td>
<td style="text-align:center">命令行参数和编辑变量</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h3 id="c-中的动态内存分配"><code>C</code> 中的动态内存分配</h3>
<ul>
<li>
<p>可以利用四种方法进行动态内存操作：</p>
<ol>
<li>
<p><code>void *calloc(int num, int size)</code>：在内存中动态地分配 <code>num</code> 个长度为 <code>size</code> 的连续空间，并将每一个字节都初始化为<code>0</code>。所以它的结果是分配了 <code>num * size</code> 个字节长度的内存空间，并且每个字节的值都是 <code>0</code> 。</p>
</li>
<li>
<p><code>void free(void *address)</code>：该函数释放 <code>address</code> 所指向的内存块,释放的是动态分配的内存空间。</p>
</li>
<li>
<p><code>void *malloc(int num)</code>:在堆区分配一块指定大小的内存空间，用来存放数据。这块内存空间在函数执行完成后不会被初始化，它们的值是未知的。</p>
</li>
<li>
<p><code>void *realloc(void address, int newsize)</code>：该函数重新分配内存，把内存扩展到 <code>newsize</code>。</p>
</li>
<li>
<p><code>void *memset(void *s, int ch, size_t n)</code>：将 <code>s</code> 中当前位置后面的 <code>n</code> 个字节用 <code>ch</code> 替换并返回s。</p>
</li>
</ol>
</li>
</ul>
<h3 id="c-中的动态内存分配-2"><code>C++</code> 中的动态内存分配</h3>
<ul>
<li>
<p>使用 <code>new &lt;data_type&gt;</code> 来在分配内存的同时创建一个对象，使用 <code>delete &lt;data_name&gt;</code> 来删除分配的内存。</p>
</li>
<li>
<p>对于内置类型而言，<code>new</code> 仅仅是分配内存，除非后面显示加 <code>()</code>，相当于调用它的构造函数，对于自定义类型而言，只要一调用 <code>new</code>，那么编译器不仅仅给它分配内存，还调用它的默认构造函数初始化，即使后面没有加 <code>()</code>。</p>
</li>
</ul>
<h3 id="mallocfree与newdelete-的区别"><code>malloc/free与new/delete</code> 的区别</h3>
<ul>
<li>
<p>相同点：都可用于申请动态内存和释放内存。</p>
</li>
<li>
<p>不同点：</p>
<ol>
<li>
<p><code>malloc</code> 与 <code>free</code> 是 <code>C</code> 语言的标准库函数，<code>new/delete</code> 是 <code>C++</code> 的操作符。</p>
</li>
<li>
<p><code>malloc</code> 需要给定申请内存的大小，返回的指针需要强制转换；<code>new</code> 不仅无需指定内存大小并申请一块内存，还会调用类的构造函数生成对象，返回的指针不需要强制转换。</p>
</li>
<li>
<p><code>free</code> 只是释放一块内存区域，<code>del</code> 在释放内存区域的同时还对调用类的析构函数。</p>
</li>
<li>
<p><code>malloc</code> 失败返回空，<code>new</code> 失败抛异常。</p>
</li>
</ol>
</li>
</ul>
<h2 id="函数相关">函数相关</h2>
<h3 id="函数参数的压栈顺序">函数参数的压栈顺序</h3>
<ul>
<li>从右到左。</li>
</ul>
<h3 id="处理函数返回值">处理函数返回值</h3>
<ul>
<li>在函数返回时会生成一个临时变量来保存返回值结果，把函数返回值的引用作为函数参数传入函数内。</li>
</ul>
<h3 id="可变参数的函数">可变参数的函数</h3>
<ul>
<li>
<p>该功能在 <code>stdarg.h</code> 头文件中实现。使用该功能的具体步骤可以概括为：</p>
<ol>
<li>
<p>定义一个函数，最后一个参数为省略号，省略号之前的参数是 <code>int</code>，代表了要传递的可变参数的总数。</p>
</li>
<li>
<p>在函数定义中创建一个 <code>va_list</code> 类型变量，该类型是在 <code>stdarg.h</code> 头文件中定义的。</p>
</li>
<li>
<p>使用 <code>int</code> 参数和 <code>va_start</code> 宏来初始化 <code>va_list</code> 变量为一个参数列表。宏 <code>va_start</code> 是在 <code>stdarg.h</code> 头文件中定义的。</p>
</li>
<li>
<p>使用 <code>va_arg</code> 宏和 <code>va_list</code> 变量来访问参数列表中的每个项。</p>
</li>
<li>
<p>使用宏 <code>va_end</code> 来清理赋予 <code>va_list</code> 变量的内存。</p>
</li>
</ol>
</li>
</ul>
<h3 id="回调函数">回调函数</h3>
<ul>
<li>
<p>函数指针变量可以作为某个函数的参数来使用的，回调函数就是一个通过函数指针调用的函数。</p>
</li>
<li>
<p>简单来说：回调函数是由别人的函数执行时调用你实现的函数。</p>
</li>
<li>
<p>一个回调函数的通俗解释，源于<a href="https://www.zhihu.com/answer/13005983">知乎回答</a>：你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。</p>
</li>
</ul>
<h2 id="面向对象相关">面向对象相关</h2>
<h3 id="对象的定义">对象的定义</h3>
<ul>
<li>对象是指一块能存储数据并具有某种类型的内存空间。</li>
</ul>
<h3 id="封装">封装</h3>
<ul>
<li>封装是面向对象编程中的把数据和操作数据的函数绑定在一起的一个概念，这样能避免受到外界的干扰和误用，从而确保了安全。</li>
</ul>
<h3 id="抽象">抽象</h3>
<ul>
<li>
<p>数据抽象是指，只向外界提供关键信息，并隐藏其后台的实现细节，即只表现必要的信息而不呈现细节。</p>
</li>
<li>
<p>数据抽象有两个重要的优势：</p>
<ol>
<li>
<p>类的内部受到保护，不会因无意的用户级错误导致对象状态受损。</p>
</li>
<li>
<p>类实现可能随着时间的推移而发生变化，以便应对不断变化的需求，或者应对那些要求不改变用户级代码的错误报告。</p>
</li>
</ol>
</li>
<li>
<p>设计策略：抽象把代码分离为接口和实现。所以在设计组件时，必须保持接口独立于实现，这样，如果改变底层实现，接口也将保持不变。</p>
</li>
</ul>
<h3 id="继承">继承</h3>
<ul>
<li>
<p>三种继承方式相应地改变了基类成员的访问属性，如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:center">继承方式</th>
<th style="text-align:center">基类 <code>public</code> 成员、<code>protected</code> 成员、<code>private</code> 成员变化</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>public</code> 继承</td>
<td style="text-align:center"><code>public, protected, private</code></td>
</tr>
<tr>
<td style="text-align:center"><code>private</code> 继承</td>
<td style="text-align:center"><code>private, private, private</code></td>
</tr>
<tr>
<td style="text-align:center"><code>protected</code> 继承</td>
<td style="text-align:center"><code>protected, protected, private</code></td>
</tr>
</tbody>
</table>
</li>
<li>
<p>派生类会继承所有基类方法，但下列情况除外：</p>
<ol>
<li>
<p>基类的构造函数、析构函数和拷贝构造函数。</p>
</li>
<li>
<p>基类的重载运算符。</p>
</li>
<li>
<p>基类的友元函数。</p>
</li>
</ol>
</li>
<li>
<p>假设一个类 <code>C</code> 分别被类 <code>A</code> 和类 <code>B</code> 继承，需要设置继承方式为虚继承，否则会使 <code>D</code> 创建两个对象。</p>
</li>
</ul>
<h3 id="多态">多态</h3>
<ul>
<li>
<p>多态意味着调用成员函数时，会根据调用函数的对象的类型来执行不同的函数。</p>
</li>
<li>
<p>多态的实现主要分为静态多态和动态多态。</p>
<ol>
<li>
<p>静态多态主要是重载，在编译的时候就已经确定。两个函数名相同，但是参数列表不同（个数，类型），返回值类型没有要求，在同一作用域中.</p>
</li>
<li>
<p>动态多态是用虚函数机制实现的，在运行期间动态绑定，通过在基类中对函数使用关键字 <code>virtual</code> 声明为虚函数来实现。子类继承了父类，父类中的函数是虚函数，在子类中重写了这个虚函数，这种情况会使编译器在处理派生类中重新定义的该函数时不会静态链接到基类的该函数。这种操作称为动态链接，或后期绑定。</p>
</li>
</ol>
</li>
<li>
<p>如果基类中声明虚函数时不进行定义而是进行 <code>virtual &lt;type&gt; &lt;fun()&gt; = 0</code> 的操作，这样就会声明为纯虚函数。通常在处理基类中不能对虚函数给出有意义的实现情况时使用。</p>
</li>
</ul>
<h3 id="抽象类">抽象类</h3>
<ul>
<li>
<p>如果类中至少有一个函数被声明为纯虚函数，则这个类就是抽象类。</p>
</li>
<li>
<p>设计抽象类的目的，是为了给其他类提供一个可以继承的适当的基类。抽象类不能被用于实例化对象，它只能作为接口使用。</p>
</li>
</ul>
<h3 id="对象内存布局">对象内存布局</h3>
<ul>
<li>
<p>最基本的对象内存计算规则：对象的内存大小为成员变量的内存之和，成员函数不占内存，无成员变量的对象大小为 <code>1</code> 字节。</p>
</li>
<li>
<p>对于一个只包含非静态成员变量和普通成员函数的类，成员函数放在代码区，该类所有对象公有这一个；成员变量放在堆区，该类对象私有，每新建一个对象都回新建一块内存区域。</p>
</li>
<li>
<p>当有类中有虚函数时，会为该类的每一个实例在堆区添加一个指向虚函数表的指针。</p>
</li>
<li>
<p>类中的 <code>static</code> 成员变量不占用内存该类自身实例化对象的内存。</p>
</li>
</ul>
<h3 id="析构函数">析构函数</h3>
<ul>
<li>
<p>析构函数与构造函数对应，当对象结束其生命周期，如对象所在的函数已调用完毕时，系统会自动执行析构函数。</p>
</li>
<li>
<p>类析构顺序：</p>
<ol>
<li>
<p>派生类本身的析构函数。</p>
</li>
<li>
<p>对象成员析构函数。</p>
</li>
<li>
<p>基类析构函数。</p>
</li>
</ol>
</li>
</ul>
<h3 id="拷贝构造函数">拷贝构造函数</h3>
<ul>
<li>
<p>拷贝构造函数是一种特殊的构造函数，它在创建对象时，是使用同一类中之前创建的对象来初始化新创建的对象。拷贝构造函数通常用于：</p>
<ol>
<li>
<p>通过使用另一个同类型的对象来初始化新创建的对象。</p>
</li>
<li>
<p>复制对象把它作为参数传递给函数。</p>
</li>
<li>
<p>复制对象，并从函数返回这个对象。</p>
</li>
</ol>
</li>
<li>
<p>如果类带有指针变量，并有动态内存分配，则它必须有一个拷贝构造函数。</p>
</li>
<li>
<p>拷贝构造函数的形参必须设为常量的引用，否则会引起拷贝构造函数的无限调用。</p>
</li>
</ul>
<h3 id="友元函数">友元函数</h3>
<ul>
<li>
<p>类的友元函数是定义在类外部，但有权访问类的所有私有（<code>private</code>）成员和保护（<code>protected</code>）成员。尽管友元函数的原型有在类的定义中出现过，但是友元函数并不是成员函数。</p>
</li>
<li>
<p>友元函数没有 <code>this</code> 指针，因为友元不是类的成员。只有成员函数才有 <code>this</code> 指针。</p>
</li>
<li>
<p>友元可以是一个函数，该函数被称为友元函数；友元也可以是一个类，该类被称为友元类，在这种情况下，整个类及其所有成员都是友元。如果要声明函数为一个类的友元，需要在类定义中该函数原型前使用关键字 <code>friend</code>。</p>
</li>
<li>
<p>如果要声明 <code>B</code> 类为 <code>A</code> 类的右元，即 <code>B</code> 的所有成员函数可以访问 <code>A</code> 类中的私有成员及保护成员，需要在 <code>A</code> 类中声明：</p>
<pre><code class="language-C++">friend class B
</code></pre>
</li>
</ul>
<h3 id="内联函数">内联函数</h3>
<ul>
<li>
<p>内联函数在编译时，编译器会把该函数的代码副本放置在每个调用该函数的地方。</p>
</li>
<li>
<p>对内联函数进行任何修改，都需要重新编译函数的所有客户端，因为编译器需要重新更换一次所有的代码，否则将会继续使用旧的函数。</p>
</li>
<li>
<p>引入内联函数的目的是为了解决程序中函数调用的效率问题。程序在编译器编译的时候，编译器将程序中出现的内联函数的调用表达式用内联函数的函数体进行替换，而对于其他的函数，都是在运行时候才被替代。这是以额外空间换取时间上节省。</p>
</li>
<li>
<p>使用内联函数注意三点：</p>
<ol>
<li>
<p>在内联函数内不允许使用循环语句和开关语句</p>
</li>
<li>
<p>内联函数的定义必须出现在内联函数第一次调用之前。</p>
</li>
<li>
<p>类结构中所在的类说明内部定义的函数是内联函数。</p>
</li>
</ol>
</li>
</ul>
<h3 id="虚函数-纯虚函数">虚函数 &amp; 纯虚函数</h3>
<ul>
<li>
<p>虚函数讲解：<a href="https://zhuanlan.zhihu.com/p/28530472">知乎文章</a></p>
</li>
<li>
<p>通过对象内存最开始位置的虚函数表指针 <code>vptr</code> 找到虚函数表 <code>vtbl</code>，表中存放着虚函数的指针，通过该指针找到对应虚函数的实现区域并进行调用。</p>
</li>
<li>
<p>构造函数不可以是虚函数，析构函数可以是虚函数且推荐设置为虚函数。</p>
</li>
<li>
<p>虚函数可以声明为 <code>private</code>, 并且可以被子类覆盖（因为虚函数表的传递），但子类不能调用父类的 <code>private</code> 虚函数。虚函数的重载性和它声明的权限无关。</p>
</li>
<li>
<p>声明了纯虚函数的类是一个抽象类，无法创建该类的实例，只能创建该类的派生类的实例。</p>
</li>
<li>
<p>定义纯虚函数的目的在于，使派生类仅仅只是继承函数的接口。</p>
</li>
<li>
<p>纯虚函数可以设计成私有的，不过这样不允许在本类之外的非友元函数中直接调用它，子类中只有覆盖这种纯虚函数的义务，却没有调用它的权利。</p>
</li>
</ul>
<h3 id="类的静态成员">类的静态成员</h3>
<ul>
<li>
<p>无论创建多少个该类的对象，该类的静态成员都只有一个副本。</p>
</li>
<li>
<p>类的静态成员在类的外部通过使用范围解析运算符 <code>::</code> 来重新声明静态变量从而对它进行初始化。</p>
</li>
<li>
<p>静态成员函数即使在类对象不存在的情况下也能被调用。</p>
</li>
<li>
<p>静态成员函数没有 <code>this</code> 指针只能访问静态成员数据、其他静态成员函数和类外部的其他函数。</p>
</li>
</ul>
<h3 id="内存补齐">内存补齐</h3>
<ul>
<li>
<p>内存补齐讲解：<a href="https://zhuanlan.zhihu.com/p/32261819">知乎文章</a></p>
</li>
<li>
<p>内存补齐主要遵循两条基本规则：</p>
<ol>
<li>
<p>成员变量的偏移量必须为该变量自身大小的整数倍；</p>
</li>
<li>
<p>对象内存的大小为最大成员变量大小的整数倍；</p>
</li>
</ol>
</li>
<li>
<p>宏 <code>#pragma pack (n)</code> 可以强制设定偏移量为 <code>n</code> 或自身内存大小中较小值的整数倍，<code>n</code> 为 <code>1</code> 时即设置为无内存补齐。</p>
</li>
</ul>
<h3 id="类成员函数的前置const与后置const">类成员函数的前置<code>const</code>与后置<code>const</code></h3>
<ul>
<li>
<p>当 <code>const</code> 在函数名前面的时候修饰的是函数返回值，函数返回一个常量值。</p>
</li>
<li>
<p>当 <code>const</code> 在函数名后面的输给表示是该类的常成员函数，该函数不能修改对象内的任何成员，只能发生读操作，不能发生写操作；对于该类的 <code>const</code> 的对象，不能引用非 <code>const</code> 的成员函数（只能引用后置 <code>const</code> 修饰的常成员函数）。</p>
</li>
</ul>
<h2 id="其它">其它</h2>
<h3 id="预处理">预处理</h3>
<ul>
<li>
<p><code>ANSI C</code>预定义了一些宏可以直接使用但不可以修改，包括：</p>
<ol>
<li>
<p><code>\_\_DATE\_\_</code>：当前日期，一个以 <code>&quot;MMM DD YYYY&quot;</code> 格式表示的字符常量。</p>
</li>
<li>
<p><code>\_\_TIME\_\_</code>：当前时间，一个以 <code>&quot;HH:MM:SS&quot;</code> 格式表示的字符常量。</p>
</li>
<li>
<p><code>\_\_FILE\_\_</code>：这会包含当前文件名，一个字符串常量。</p>
</li>
<li>
<p><code>\_\_LINE\_\_</code>：这会包含当前行号，一个十进制常量。</p>
</li>
<li>
<p><code>\_\_STDC\_\_</code>：当编译器以 <code>ANSI</code> 标准编译时，则定义为 <code>1</code>。</p>
</li>
</ol>
</li>
<li>
<p>预处理器运算符</p>
<ol>
<li>
<p>宏延续运算符（<code>\</code>）：一个宏通常写在一个单行上。但是如果宏太长，一个单行容纳不下，则使用宏延续运算符（<code>\</code>）。</p>
</li>
<li>
<p>字符串常量化运算符（<code>#</code>）：在宏定义中，当需要把一个宏的参数转换为字符串常量时，则使用字符串常量化运算符（<code>#</code>）。在宏中使用的该运算符有一个特定的参数或参数列表。</p>
</li>
<li>
<p>标记粘贴运算符（<code>##</code>）：宏定义内的标记粘贴运算符（<code>##</code>）会合并两个参数。它允许在宏定义中两个独立的标记被合并为一个标记。</p>
</li>
<li>
<p><code>defined()</code> 运算符：预处理器 <code>defined</code> 运算符是用在常量表达式中的，用来确定一个标识符是否已经使用 <code>#define</code> 定义过。如果指定的标识符已定义，则值为真（非零）。如果指定的标识符未定义，则值为假（零）。</p>
</li>
</ol>
</li>
</ul>
<h3 id="异常处理">异常处理</h3>
<ul>
<li>
<p>异常是程序在执行期间产生的问题。<code>C++</code> 异常处理涉及到三个关键字：</p>
<ol>
<li>
<p><code>throw</code>: 当问题出现时，程序会抛出一个异常。这是通过使用 <code>throw</code> 关键字来完成的。</p>
</li>
<li>
<p><code>catch</code>: 在您想要处理问题的地方，通过异常处理程序捕获异常。<code>catch</code> 关键字用于捕获异常。</p>
</li>
<li>
<p><code>try</code>: <code>try</code> 块中的代码标识将被激活的特定异常。它后面通常跟着一个或多个 <code>catch</code> 块。</p>
</li>
</ol>
</li>
</ul>
<h2 id="cc-中的关键字"><code>C/C++</code> 中的关键字</h2>
<h3 id="null-和-nullptr"><code>NULL</code> 和 <code>nullptr</code></h3>
<ul>
<li>在编译时 NULL 会被解释为 0 ，而 <code>nullptr</code> 就代表空指针。</li>
</ul>
<h3 id="delete-和-delete"><code>delete[]</code> 和 <code>delete</code></h3>
<ul>
<li>
<p>区别讲解：<a href="https://blog.csdn.net/u012936940/article/details/80919880">CSDN文章</a></p>
</li>
<li>
<p>概括的为：对于基本数据类型（如 <code>int</code>）二者无差别，对于自定义类型（通常指类）如果是 <code>new</code> 申请的内存，释放时用 <code>delete</code>；如果是使用 <code>new []</code> 申请的内存，释放时要用 <code>delete []</code>。</p>
</li>
</ul>
<h3 id="xx_ptr四种智能指针"><code>[xx]_ptr</code>四种智能指针</h3>
<h4 id="auto_ptr">auto_ptr</h4>
<ul>
<li>
<p>采用所有权模式，存在潜在的内存崩溃问题，于 <code>C++11</code> 中被抛弃。例如如下代码：</p>
<pre><code class="language-C++">auto_ptr&lt;string&gt; p1 (new string (&quot;Hello&quot;));
auto_ptr&lt;string&gt; p2;
p2 = p1; //auto_ptr不会报错
</code></pre>
<p>当程序运行时访问 <code>p1</code> 将会报错，因为 <code>p2</code> 剥夺了 <code>p1</code> 的所有权。</p>
</li>
</ul>
<h4 id="unique_ptr">unique_ptr</h4>
<ul>
<li>
<p>实现独占式拥有或严格拥有概念，保证同一时间内只有一个智能指针可以指向该对象，同时还有更智能的功能，比 <code>auto_ptr</code> 更安全，替代了 <code>auto_ptr</code>。针对于代码：</p>
<pre><code class="language-C++">uqinue_ptr&lt;string&gt; p1(new string (&quot;Hello&quot;));
unique_ptr&lt;string&gt; p2;
p2 = p1; //报错！避免p3不再指向有效数据的问题
p2 = move(ps1); // 正确！
p3 = unique_ptr&lt;string&gt;(new string (&quot;World&quot;)); // 正确！右值为临时值。
</code></pre>
</li>
</ul>
<h4 id="shared_ptr">shared_ptr</h4>
<ul>
<li>实现共享式拥有概念。多个智能指针可以指向相同对象，该对象和其相关资源会在“最后一个引用被销毁”时候释放。它使用计数机制来表明资源被几个指针共享，当计数等于 <code>0</code> 时，资源会被释放。</li>
</ul>
<h4 id="weak_ptr">weak_ptr</h4>
<ul>
<li><code>weak_ptr</code> 是一种不控制对象生命周期的智能指针, 它指向一个 <code>shared_ptr</code> 管理的对象. 进行该对象的内存管理的是那个强引用的 <code>shared_ptr</code>。 <code>weak_ptr</code> 只是提供了对管理对象的一个访问手段。<code>weak_ptr</code> 设计的目的是为配合 <code>shared_ptr</code> 而引入的一种智能指针来协助 <code>shared_ptr</code> 工作, 它只可以从一个 <code>shared_ptr</code> 或另一个 <code>weak_ptr</code> 对象构造, 它的构造和析构不会引起引用记数的增加或减少。</li>
</ul>
<h3 id="xx_cast四种转换"><code>[xx]_cast</code>四种转换</h3>
<ul>
<li>讲解：<a href="https://www.jianshu.com/p/5163a2678171">简书文章</a></li>
</ul>
<h4 id="static_cast"><code>static_cast</code></h4>
<ul>
<li>
<p>主要用于非多态类型之间的转换，不提供运行时的检查来确保转换的安全性。主要在以下几种场合中使用：</p>
<ol>
<li>
<p>用于类层次结构中，基类和子类之间指针和引用的转换；</p>
<p>当进行上行转换，也就是把子类的指针或引用转换成父类表示，这种转换是安全的；</p>
<p>当进行下行转换，也就是把父类的指针或引用转换成子类表示，这种转换是不安全的，也需要程序员来保证；</p>
</li>
<li>
<p>用于基本数据类型之间的转换，如把 <code>int</code> 转换成 <code>char</code>，把 <code>int</code> 转换成<code>enum</code> 等等，这种转换的安全性需要程序员来保证；</p>
</li>
<li>
<p>把 <code>void</code> 指针转换成目标类型的指针，是及其不安全的；</p>
</li>
</ol>
</li>
<li>
<p><code>static_cast</code> 不能转换掉 <code>expression</code> 的 <code>const</code>、<code>volatile</code> 和<code>__unaligned</code> 属性。</p>
</li>
</ul>
<h4 id="const_cast"><code>const_cast</code></h4>
<ul>
<li>用于将 <code>const</code> 属性转为非 <code>const</code> 属性。</li>
</ul>
<h4 id="dynamic_cast"><code>dynamic_cast</code></h4>
<ul>
<li>
<p><code>dynamic_cast</code> 主要用于类层次间的上行转换和下行转换，还可以用于类之间的交叉转换，只能用于含有虚函数的类间的转换，且只能转换为类的指针、类的引用或是 <code>void*</code>。</p>
</li>
<li>
<p>在类层次间进行上行转换时，与 <code>static_cast</code> 效果一样；在进行类层次间的下行转换时，会检查基类的指针是否真正的指向一个子类类型的对象，如果是则能进行正确的转换，否则会返回 <code>NULL</code>，如果是引用则会在运行时抛出异常。一段应用代码：</p>
<pre><code class="language-C++">//定义
class Widget{};
class SpecialWidget:public Widget{};
void update(SpecialWidget  *psw);

Widget * pw;

//如果pw所指的是SpecialWidget ，那么就传递过去；如果pw指的是Widget ，
//那么传递过去的值是null
update(dynamic_cast&lt;SpecialWidget  *&gt; (pw));
</code></pre>
</li>
</ul>
<h4 id="reinterpret_cast"><code>reinterpret_cast</code></h4>
<ul>
<li>几乎什么都可以转，故可能会出问题，尽量少用。</li>
</ul>
<h3 id="auto"><code>auto</code></h3>
<ul>
<li>
<p><code>auto</code> 是所有局部变量默认的存储类。<code>auto</code> 只能用在函数内，即 <code>auto</code> 只能修饰局部变量。</p>
</li>
<li>
<p>从 <code>C++ 17</code> 开始，<code>auto</code> 关键字不再是 <code>C++</code> 存储类说明符。</p>
</li>
</ul>
<h3 id="regiter"><code>regiter</code></h3>
<ul>
<li>
<p><code>register</code> 用于定义存储在寄存器中而不是 <code>RAM</code> 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 <code>'&amp;'</code> 运算符（因为它没有内存位置）。</p>
</li>
<li>
<p>寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 <code>'register'</code> 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。</p>
</li>
<li>
<p>从 <code>C++ 17</code> 开始，<code>register</code> 关键字被弃用。</p>
</li>
</ul>
<h3 id="static"><code>static</code></h3>
<ul>
<li>
<p><code>static</code> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。即当局部静态变量离开作用域后，并没有销毁，而是仍然驻留在内存当中，只不过我们不能再对它进行访问，直到该函数再次被调用，并且值不变。因此，使用 <code>static</code> 修饰局部变量可以在函数调用之间保持局部变量的值。</p>
</li>
<li>
<p><code>static</code> 修饰符可以应用于全局变量。当 <code>static</code> 修饰全局变量时，会使变量的作用域限制在声明它的文件内。全局声明的一个 <code>static</code> 变量或方法可以被任何函数或方法调用，只要这些方法出现在跟 <code>static</code> 变量或方法同一个文件中。</p>
</li>
<li>
<p>在函数返回类型前加static，函数就定义为静态函数，这个函数只可在本 <code>cpp</code> 内使用，不会同其他 <code>cpp</code> 中的同名函数引起冲突。函数的定义和声明在默认情况下都是 <code>extern</code> 的，但静态函数只是在声明他的文件当中可见，不能被其他文件所用</p>
</li>
<li>
<p>在 <code>C++</code> 中，当 <code>static</code> 用在类数据成员上时，会导致仅有一个该成员的副本被类的所有对象共享。</p>
</li>
<li>
<p>静态成员函数的实现中不能直接引用类中说明的非静态成员，可以引用类中说明的静态成员。</p>
</li>
</ul>
<h3 id="extern"><code>extern</code></h3>
<ul>
<li>
<p><code>extern</code> 用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当使用 <code>extern</code> 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。</p>
</li>
<li>
<p>当有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <code>extern</code> 来得到已定义的变量或函数的引用。可以这么理解，<code>extern</code> 是用来在另一个文件中声明一个全局变量或函数。</p>
</li>
<li>
<p><code>extern</code> 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候。</p>
</li>
</ul>
<h3 id="stdout-stderr"><code>stdout</code> &amp; <code>stderr</code></h3>
<ul>
<li>
<p><code>stdout &amp; stderr</code> 默认均为向屏幕输出。</p>
</li>
<li>
<p>当输出重定向至磁盘文件时，<code>stdout</code> 可以重定向到磁盘文件存储而 <code>stderr</code> 不行。</p>
</li>
<li>
<p>对于 <code>Linux</code> 环境下（<strong>未测验，据网上讲解</strong>）:</p>
<ol>
<li>
<p><code>stdout</code>（标准输出），输出方式是行缓冲。输出的字符会先存放在缓冲区，等按下回车键时才进行实际的 <code>I/O</code> 操作。</p>
</li>
<li>
<p><code>stderr</code>（标准错误），是不带缓冲的，这使得出错信息可以直接尽快地显示出来。</p>
</li>
</ol>
</li>
<li>
<p>对于 <code>Windows</code> 环境下（<strong>已编写程序测验</strong>）：</p>
<p><code>stdout</code> 和 <code>stderr</code> 均直接输出，即 <code>stdout</code> 不碰到回车符也会输出。</p>
</li>
</ul>
<h3 id="size_t"><code>size_t</code></h3>
<ul>
<li><code>size_t</code> 通常被用于数组索引和循环计数。使用其它类型来进行数组索引操作的程序可能会在某些情况下出错。</li>
</ul>
<h2 id="cc-中的内置函数"><code>C/C++</code> 中的内置函数</h2>
<h3 id="sizeof"><code>sizeof()</code></h3>
<ul>
<li>
<p>对于一个空类型/只有构造函数和析构函数的类型，占用多少内存（对类求 <code>sizeof()</code> 的结果）由编译器决定（<code>VS</code> 中为 <code>1</code>）。</p>
</li>
<li>
<p>对于一个数组，<code>sizeof</code> 求整个数组的大小。</p>
</li>
</ul>
<h3 id="assert-int-expression"><code>assert( int expression )</code></h3>
<ul>
<li>
<p><code>assert</code> 的作用是先计算表达式 <code>expression</code>，如果其值为假（即为<code>0</code>）那么它先向 <code>stderr</code> 打印一条出错信息,然后通过调用 abort 来终止程序运行。</p>
</li>
<li>
<p>使用 <code>assert</code> 的缺点是，频繁的调用会极大的影响程序的性能，增加额外的开销。</p>
</li>
</ul>
<h2 id="stl-相关"><code>STL</code> 相关</h2>
<h3 id="vector"><code>vector</code></h3>
<ul>
<li>
<p>底层基于数组实现。</p>
</li>
<li>
<p>拥有一段连续的内存空间，支持随机访问且随机访问性能好，插入删除性能差，一次性分配好内存，不够时才进行扩容。</p>
</li>
<li>
<p><code>vector</code>每次扩充容量时，新的容量都是前一次的两倍（这样可以保证常数时间的时间复杂度）。把之前的数据复制到新的数组中，再释放之前的内存（在时间性能有负面影响）。</p>
</li>
</ul>
<h3 id="list"><code>list</code></h3>
<ul>
<li>
<p>底层基于双向链表实现。</p>
</li>
<li>
<p>占用内存不连续，不支持随机访问，插入删除性能好，每次插入新节点都会进行内存申请。</p>
</li>
</ul>
<h3 id="set"><code>set</code></h3>
<ul>
<li>底层基于红黑树实现，适用于有序不重复集合。</li>
</ul>
<h3 id="map"><code>map</code></h3>
<ul>
<li>底层基于红黑树实现，适用于不重复映射的有序键值对。</li>
</ul>
<h3 id="unordered_map"><code>unordered_map</code></h3>
<ul>
<li>底层基于哈希表实现，无序。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一个简单的小型校园网如何设计？]]></title>
        <id>https://geniusmiaozz.github.io/post/yi-ge-jian-dan-de-xiao-xing-xiao-yuan-wang-ru-he-she-ji/</id>
        <link href="https://geniusmiaozz.github.io/post/yi-ge-jian-dan-de-xiao-xing-xiao-yuan-wang-ru-he-she-ji/">
        </link>
        <updated>2020-03-29T05:53:02.000Z</updated>
        <content type="html"><![CDATA[<h2 id="设计要求">设计要求</h2>
<ul>
<li>某大学分为总校和分校，为该校设计校园网，总校有一个局域网共20台计算机，分校由VLAN 划分为两个局域网，分别有10台计算机。该校被分配了一个C类网段210.100.10.0，总校和分校各有一台路由器及一台交换机。请进行网络设计，将总校和分校各个局域网连接起来。 根据要求，设计IP地址分配表，设计网络结构，画出网络拓扑图。根据设计搭建网络结构。配置网络设备，完成网络调试。</li>
</ul>
<h2 id="设计思路">设计思路</h2>
<ul>
<li>
<p>审题发现，题目要求将一个C类IP地址分为三个局域网，首先由两台路由器分出两个局域网，再由一台交换机将其中一个局域网划分为两个局域网。同时考虑到路由器之间也存在一段网络，顾应将此IP地址划分为4个子网，其中分校、总校两台路由器相连，一台三层交换机、一台二层交换机分别与分校、总校的交换机相连，三层交换机划分出分校的两个子网，二层交换机直接连接总校的子网。设n为子网号位数，利用公式：</p>
<figure data-type="image" tabindex="1"><img src="https://geniusmiaozz.github.io/post-images/1586529738463.png" alt="" loading="lazy"></figure>
<p>不难求出子网号位数为3。到这里，基本的设计思路就分析完毕了。</p>
</li>
</ul>
<h2 id="设计总图">设计总图</h2>
<figure data-type="image" tabindex="2"><img src="https://geniusmiaozz.github.io/post-images/1586529750171.png" alt="" loading="lazy"></figure>
<h2 id="配置指令">配置指令</h2>
<ul>
<li>
<p>首先配置总校交换机SwitchA，创建一个vlan并分配指定端口。</p>
<pre><code>  SwitchA(config)#vlan 10//创建主校的vlan
  SwitchA(config-vlan)#exit
  SwitchA(config)#interface gigabitEthernet0/1//配置1号端口
  SwitchA(config-if)#switchport access vlan 10//1号端口加入vlan10
  SwitchA(config-if)#exit
  SwitchA(config)#interface gigabitEthernet0/24//配置24号端口
  SwitchA(config-if)#switchport mode trunk//24号端口设为trunk模式以便备用
  SwitchA(config-if)#end
  SwitchA(config)#show vlan//检验vlan配置
</code></pre>
</li>
<li>
<p>SwitchA的vlan配置无误后，进入总校路由器Router1的配置。</p>
<pre><code>  Router1(config)#interface gigabitEthernet0/0.10//配置0号端口
  Router1(config-subif)#encapsulation dot1q 10//封装802.1Q，指定给Vlan 10
  Router1(config-subif)#ip address 210.100.10.33 255.255.255.224//分配给主校网络
  Router1(config-subif)#exit
  Router1(config)#interface gigabitEthernet0/1//配置1号端口
  Router1(config-if)#ip address 210.100.10.65 255.255.255.224//IP
  Router1(config-if)#no shutdown//开启端口
  Router1(config-if)#end
  Router1#show ip interface brief//检验IP地址和接口配置
  Router1(config)#ip route 210.100.10.96 255.255.255.224 210.100.10.66//到分校子网1的静态路由
  Router1(config)#ip route 210.100.10.128 255.255.255.224 210.100.10.66//到分校子网2的静态路由
  Router1(config)#end
  Router1#show ip route//检验静态路由配置
  Router1#wr//写入配置
</code></pre>
</li>
<li>
<p>此时已经完成了总校的配置，接下来配置分校交换机SwitchB。</p>
<pre><code>  SwitchB(config)#vlan 10//创建vlan10
  SwitchB(config-vlan)#exit
  SwitchB(config)#vlan 20//创建vlan20
  SwitchB(config-vlan)#exit
  SwitchB(config)#interface gigabitEthernet0/1//配置1号端口
  SwitchB(config-if)#switchport access vlan 10//1号端口划入vlan10
  SwitchB(config-if)#exit
  SwitchB(config)#interface gigabitEthernet0/2//配置2号端口
  SwitchB(config-if)#switchport access vlan 20//2号端口划入vlan20
  SwitchB(config-if)#exit
  SwitchB(config)#interface gigabitEthernet0/24//配置24号端口
  SwitchB(config-if)#switchport mode trunk//24号设为共享端口
  SwitchB(config-if)#end
  SwitchB#show vlan//检验vlan配置
</code></pre>
</li>
<li>
<p>SwitchB的vlan配置无误后，进入分校路由器Router2的配置。</p>
<pre><code>  Router2(config)#interface gigabitEthernet0/1//配置1号端口
  Router2(config-if)#ip address 210.100.10.66 255.255.255.224//IP
  Router2(config-if)#no shutdown//开启端口
  Router2(config-if)#exit
  Router2(config)#interface gigabitEthernet0/0//配置0号端口
  Router2(config-if)#no ip address//无需直接分配IP地址
  Router2(config-if)#no shutdown//需要开启端口
  Router2(config-if)#exit
  Router2(config)#interface gigabitEthernet0/0.10//配置子网1
  Router2(config-subif)#encapsulation dot1q 10//封装802.1Q，指定给Vlan 10
  Router2(config-subif)#ip address 210.100.10.97 255.255.255.224//IP
  Router2(config-subif)#exit
  Router2(config)#interface gigabitEthernet0/0.20//配置子网2
  Router2(config-subif)#encapsulation dot1q 20
  Router2(config-subif)#ip address210.100.10.129 255.255.255. 224//IP
  Router2(config-subif)#exit
  Router2#show ip interface brief//检验IP地址和接口配置
  Router2(config)#ip route 210.100.10.32 255.255.255.224 210. 100.10.65//到总校子网的静态路由
  Router2(config)#end
  Router2#show ip route//检验静态路由配置
  Router2#wr//写入配置
</code></pre>
</li>
</ul>
<h2 id="结果验证">结果验证</h2>
<ul>
<li>
<p>此时，所有的软硬件配置都已完成，直接在计算机上设定本机的IP地址、子网掩码、默认网关，然后正确接线之后即可通过 <code>ping</code> 指令进行验证。举例：</p>
<ol>
<li>
<p>总校PC1</p>
<p>IP：210.100.10.35</p>
<p>子网掩码：255.255.255.224</p>
<p>默认网关：255.255.255.33</p>
</li>
<li>
<p>分校PC2</p>
<p>IP：210.100.10.100</p>
<p>子网掩码：255.255.255.224</p>
<p>默认网关：210.100.10.97</p>
</li>
<li>
<p>分校PC3</p>
<p>IP：210.100.10.130</p>
<p>子网掩码：255.255.255.224</p>
<p>默认网关：210.100.10.129</p>
</li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[看了这段代码，我……]]></title>
        <id>https://geniusmiaozz.github.io/post/ni-jian-guo-zhe-yang-de-dai-ma-ma/</id>
        <link href="https://geniusmiaozz.github.io/post/ni-jian-guo-zhe-yang-de-dai-ma-ma/">
        </link>
        <updated>2020-03-07T09:47:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="长见识了">长见识了..</h1>
<p>前两天刷知乎时看到这样一行代码：</p>
<p><strong>char *(*c[10])(int **p);</strong></p>
<p>当时我的大脑中是这样的：</p>
<figure data-type="image" tabindex="1"><img src="https://geniusmiaozz.github.io/post-images/1583574662322.png" alt="" loading="lazy"></figure>
<p>随之我的大脑中是这样的：</p>
<p>*c[10]我记得是一个指针数组，数组中的元素为指针；后面括号中的内容只能是参数了，参数为一个int类型的二重指针？那前面的char *呢。。</p>
<p>上网求解之后我的大脑又变成了这样的：</p>
<figure data-type="image" tabindex="2"><img src="https://geniusmiaozz.github.io/post-images/1583574683219.jpg" alt="" loading="lazy"></figure>
<hr>
<p>题解+个人总结：</p>
<ul>
<li>
<p>首先，c[10]是一个数组。</p>
</li>
<li>
<p>在前面加上一个*，*c[10]是一个指针数组，数组中元素的类型为指针；如果是(*c)[10]，则为一个数组指针，c这个指针指向一个元素个数为10的数组的首地址。</p>
</li>
<li>
<p>紧接着，由于加上了参数，(*c[10])(int **p)是一个函数指针的数组，函数有一个int **p二重指针作为形参。</p>
</li>
<li>
<p>最后，char *(*c[10])(int **p)代表：c是一个数组，该数组用于存放一个形参为整型二重指针、返回值为字符串的函数的函数指针。</p>
</li>
</ul>
<p>再附上一段网上给出的代码：</p>
<pre><code class="language-c++">char *(*c[10])(int **p);
char *fun(int **p)
{
    return &quot;hello\n&quot;;
}
int main()
{
	c[0] = fun;
	printf(&quot;%s&quot;, c[0](NULL));
	return 0;
}
</code></pre>
<p>亲测的运行结果：<img src="https://geniusmiaozz.github.io/post-images/1583574463792.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[什么是软件过程？]]></title>
        <id>https://geniusmiaozz.github.io/post/ruan-jian-gong-cheng-zhong-guo-cheng-de-gai-nian/</id>
        <link href="https://geniusmiaozz.github.io/post/ruan-jian-gong-cheng-zhong-guo-cheng-de-gai-nian/">
        </link>
        <updated>2020-03-04T16:02:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="软件过程的定义">软件过程的定义</h1>
<p><strong>软件过程由开发或维护软件及其相关产品的一系列活动构成，这些活动从不同的方面定义了软件开发中的步骤、交付物、涉众及其职责等流程要素。</strong></p>
<h1 id="为什么要引入软件过程">为什么要引入软件过程？</h1>
<ul>
<li>
<p>软件工作的范围从只考虑编写程序扩展到需要考虑整个软件生存周期。</p>
</li>
<li>
<p>软件的开发风险从曾经的少、可预知、可控制演变到多、不易预知、不易控制。</p>
</li>
<li>
<p>软件开发的角色从程序员扩展到需要团队中更多的角色。</p>
</li>
<li>
<p>软件标准从软件产品的标准化扩展到软件开发过程的标准化。</p>
</li>
</ul>
<h1 id="软件过程的实现">软件过程的实现</h1>
<p><strong>一个软件的生命周期分为软件定义、软件开发、软件维护三个周期，整个过程包含基本活动及辅助性活动。软件过程通过三个“IN”：输入，如需求；资源，如人力、工具；控制，如预算、时间表、规范标准，最终完成一个“OUT”如程序代码、程序文档。</strong></p>
<h1 id="活动的概念">活动的概念</h1>
<ul>
<li>
<p>基础活动</p>
<p>主要包含问题定义，需求，规约，设计，实现，软件验证，集成，软件演进/维护，退役等。</p>
</li>
<li>
<p>辅助性活动</p>
<p>软件项目跟踪和控制，正式的技术复审，软件质量保证，软件配置管理，文档编制，服用管理，度量，风险管理等。</p>
</li>
</ul>
<h1 id="活动详解">活动详解</h1>
<h2 id="问题定义活动">问题定义活动</h2>
<ul>
<li>
<p>What</p>
<p>定义要解决的问题，并确定系统范围。</p>
</li>
<li>
<p>Why</p>
<p>形成初步的早起判断，达成最初共识。</p>
</li>
<li>
<p>When</p>
<p>在项目日程表的最前端，占整个开发时间中的比例很小。</p>
</li>
<li>
<p>Who</p>
<p>由系统分析师、出资方领导、出资方技术人员、开发方领导和项目经理定义。</p>
</li>
<li>
<p>Where</p>
<p>客户现场。</p>
</li>
<li>
<p>How<br>
<img src="https://geniusmiaozz.github.io/post-images/1583337862318.jpg" alt="" loading="lazy"></p>
</li>
</ul>
<h2 id="可行性研究活动">可行性研究活动</h2>
<ul>
<li>
<p>What</p>
<p>以相对短的时间和相对低的成本来确定给定的问题在其约束条件内是否有解、有几种解以及哪个是最佳解。</p>
</li>
<li>
<p>Why</p>
<p>确立满足约束条件的方案是否存在、是否可行、是否最优，然后才能在最优方案的基础上进行开发、</p>
</li>
<li>
<p>When</p>
<p>在项目的早期阶段，占整个开发时间中的比例较小。</p>
</li>
<li>
<p>Who</p>
<p>由系统分析师、出资方领导、出资方技术人员、开发方领导、项目经理、架构设计师、市场人员、软件质量保证人员等研究。</p>
</li>
<li>
<p>Where</p>
<p>客户现场。</p>
</li>
<li>
<p>How</p>
</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://geniusmiaozz.github.io/post-images/1583338118988.jpg" alt="" loading="lazy"></figure>
<h2 id="需求分析活动">需求分析活动</h2>
<ul>
<li>
<p>What</p>
<p>通过五点来描述：</p>
<ul>
<li>
<p>需求：主要是在产品构建之前确定的系统必须符合的条件或具备的功能，它们是关于系统将要完成什么工作的一段描述语句，它们必须经过所有相关人员的认可，其目的是彻底地解决客户的问题。</p>
</li>
<li>
<p>需求文档：一组需求的集合，分为用户需求文档、系统需求文档和软件规约文档</p>
</li>
<li>
<p>功能性需求：描述了系统应该做什么，即具备的功能或服务。（输入、输出和计算等）</p>
</li>
<li>
<p>非功能性需求：描述了系统必须遵守的约束条件。（响应时间、吞吐量、可靠性、可移植性、可扩展性、易用性、安全性、资源要求、可复 用性、技术要求、文化和政策需求、法律需求、道德要求、隐私要求，等等）</p>
</li>
<li>
<p>描述需求的标准：是完整的、正确的、必要的、无歧义的、可行的、可验证的以及被设置了优先级别的。</p>
</li>
</ul>
</li>
<li>
<p>Why</p>
<p>六个错误：</p>
<ul>
<li>
<p>需求不一致、模糊、矛盾</p>
</li>
<li>
<p>需求变更</p>
</li>
<li>
<p>客户忽略领域常识/知识/术语</p>
</li>
<li>
<p>客户集中于现有系统的不足之处，而忽略了系统要实现的关键功能</p>
</li>
<li>
<p>零碎、无组织、不明确、表达不清</p>
</li>
<li>
<p>不分轻重缓急</p>
</li>
</ul>
</li>
<li>
<p>When</p>
<p>贯穿于整个软件开发过程，早起工作量大后逐渐减少。</p>
</li>
<li>
<p>Who</p>
<p>系统分析师、需求阐释者、客户代表、用户代表、开发方领导、项目经理、架构设计师、领域专家、财务人员、市场人员、软件质量保证（SQA，Software Quality Assure）人员、程序员、测试人员、部署人员、技术文档编写人员、培训人员等。</p>
</li>
<li>
<p>Where</p>
<p>三种情况：</p>
<ul>
<li>
<p>调研时，在客户现场</p>
</li>
<li>
<p>编纂软件需求规约文档时，可以在开发单位</p>
</li>
<li>
<p>复审相关的需求文档时，根据需要来安排</p>
</li>
</ul>
</li>
<li>
<p>How</p>
</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://geniusmiaozz.github.io/post-images/1583338131488.jpg" alt="" loading="lazy"></figure>
<h2 id="设计活动">设计活动</h2>
<ul>
<li>
<p>What</p>
<p>通过四个方面来描述：</p>
<ul>
<li>
<p>设计：是在系统的约束条件下（如预算、时间、人力资源、用户软、硬件环境和用户对系统的操作能力等），为了实现系统的功能性需求和非功能性需求，而找到并描述的一种遵循高质量的通用原则的方法，其交付文档能够指导开发人员实现系统。</p>
</li>
<li>
<p>总体设计：任务是根据软件需求规约文档，确定一个合理的软件体系结构。这个体系结构包括合理地划分组成系统的模块、模块间的调用关系以及模块间的接口关系。软件体系结构还从总体方面决定了系统的可扩充性、可维护性，以及系统的性能等。总体设计的设计粒度较大，有时也被称为概要设计、架构设计。</p>
</li>
<li>
<p>详细设计：详细设计地任务是在总体设计的基础上进一步确定如何实现目标系统，包括系统的数据对象的设计、人机接口的设计以及模块逻辑的详细设计。</p>
</li>
<li>
<p>设计部件的粒度：系统、子系统、框架、构件、组件、模块、类、 方法等。</p>
</li>
</ul>
</li>
<li>
<p>Why</p>
<p>主要包含：</p>
<ul>
<li>
<p>软件架构是软件系统的核心</p>
</li>
<li>
<p>应对复杂多变的情况，同时保持完整性</p>
</li>
<li>
<p>应对系统在扩展功能当中出现的问题</p>
</li>
<li>
<p>大规模复用的有效基础</p>
</li>
<li>
<p>项目管理的基础</p>
</li>
</ul>
</li>
<li>
<p>When</p>
<p>贯穿于整个软件开发过程的设计活动。</p>
</li>
<li>
<p>Who</p>
<p>主要包括架构设计师、软件设计员、复用工 程师、设计复审员、项目经理、财务人员、 软件质量保证（SQA，Software Quality Assure）人员和需求变更者等。</p>
</li>
<li>
<p>Where</p>
<p>建议在软件企业内部进行设计。</p>
</li>
<li>
<p>How</p>
</li>
</ul>
<figure data-type="image" tabindex="3"><img src="https://geniusmiaozz.github.io/post-images/1583338157712.jpg" alt="" loading="lazy"></figure>
<h2 id="实施活动">实施活动</h2>
<ul>
<li>
<p>What</p>
<p>三个方面：</p>
<ul>
<li>
<p>编码：是将软件设计结果转换成用某种程序设计语言书写的程序。</p>
</li>
<li>
<p>单元测试：是把一个模块作为独立的程序单元进行测试，以保证它能够正确执行规定的功能。</p>
</li>
<li>
<p>集成：是指将单独的软件构件合并成一个整体的软件系统。集成分为集成子系统和集成系统两个级别。</p>
</li>
</ul>
</li>
<li>
<p>Why</p>
<p>两个极端：</p>
<ul>
<li>以实施为中心的软件开发</li>
</ul>
<p>弱化的需求，弱化的设计。对实施人员的过度依赖。</p>
<ul>
<li>对实施活动的轻视</li>
</ul>
<p>需要的时间进入工作状态，具有技术含量，水平存在差异，实施质量不易度量</p>
</li>
<li>
<p>When</p>
<p>项目的中、后期阶段。</p>
</li>
<li>
<p>Who</p>
<p>包括实施员、代码复审员、集成员、测试工程师、测试员、项目经理、架构设计师、软件设计员、复用工程师、SQA人员和财务人员等</p>
</li>
<li>
<p>Where</p>
<p>建议在软件企业内部进行开发。</p>
</li>
<li>
<p>How</p>
</li>
</ul>
<figure data-type="image" tabindex="4"><img src="https://geniusmiaozz.github.io/post-images/1583338166171.jpg" alt="" loading="lazy"></figure>
<h2 id="测试活动">测试活动</h2>
<ul>
<li>
<p>What</p>
<p>通过七个方面来描述：</p>
<ul>
<li>
<p>测试：是选择适当的测试用例执行被测程序的过程，其目的在于发现程序错误。</p>
</li>
<li>
<p>缺陷：是系统任一方面（包括需求、设计或代码）的缺点。该缺点会促成或潜在的促成一个或多个失败发生。</p>
</li>
<li>
<p>错误：是指程序中的缺陷所产生的不正确结果。</p>
</li>
<li>
<p>失败：当一个程序不能运行或者其表现不可被接受时称为失败。失败是系统执行中出现的情况。失败源于代码 缺陷。</p>
</li>
<li>
<p>主要包含6种测试活动：单元测试、集成测试、系统测试、α测试、β测试、验收测试。</p>
</li>
<li>
<p>质量维度：描述质量的概念或评测质量的方法的不同视角。</p>
</li>
<li>
<p>测试用例：为特定目标开发的测试输入、执行条件和预期结果的集合。</p>
</li>
</ul>
</li>
<li>
<p>Why</p>
<p>三方面：</p>
<ul>
<li>
<p>及时检查出项目中的缺陷和不足。</p>
</li>
<li>
<p>保证所开发的软件能够达到用户满意。</p>
</li>
<li>
<p>测试是项目管理的重要内容。</p>
</li>
</ul>
</li>
<li>
<p>When</p>
<p>贯穿于软件整个生命周期中。</p>
</li>
<li>
<p>Who</p>
<p>主要包括测试工程师、测试员、软件设计员、实施员、项目经理、部署工程师、部署员、SQA人员和财务人员等。</p>
</li>
<li>
<p>Where</p>
<p>建议单元测试、集成测试和系统测试在实施员所在的开发现场及其附近进行，β测试和验收测试则完全在用户现场测试。</p>
</li>
<li>
<p>How</p>
</li>
</ul>
<figure data-type="image" tabindex="5"><img src="https://geniusmiaozz.github.io/post-images/1583338176023.jpg" alt="" loading="lazy"></figure>
<h2 id="部署活动">部署活动</h2>
<ul>
<li>
<p>What</p>
<p>通过四个方面来描述：</p>
<ul>
<li>
<p>部署：是为确保最终用户可以正常使用软件产品而进行的活动。</p>
</li>
<li>
<p>根据产品类型，可以将部署分为三种模式:</p>
<p>1.自定义安装模式</p>
<p>2.现场支持模式</p>
<p>3.Internet模式</p>
</li>
<li>
<p>部署单元：由一个工作版本（可执行构件集）、文档（最终用户支持材料和发布说明）和安装工件组成。</p>
</li>
<li>
<p>部署计划：说明如何将产品从开发商转移到用户群。指定兼容、转换和迁移策略、部署时间表、部署顺序，并需要进行用户培训。</p>
</li>
</ul>
</li>
<li>
<p>Why</p>
<p>主要包含三点：</p>
<ul>
<li>
<p>用户的应用环境和项目团队的开发环境往往不同，需要进行调试、磨合。</p>
</li>
<li>
<p>数据或程序迁移。</p>
</li>
<li>
<p>培训服务和使用支持。</p>
</li>
</ul>
</li>
<li>
<p>When</p>
<p>主要在后期，早期及中期因为需要做部署计划所以也会有。</p>
</li>
<li>
<p>Who</p>
<p>主要包括部署工程师、部署员、文档编写员、包装员、实施员、项目经理、SQA人员和财务人员等。</p>
</li>
<li>
<p>Where</p>
<p>一部分工作可以在开发现场进行，如制定部署计划、包装产品、编写相关文档等；另一部分工作必须在用户现场进行，如β测试、验收测试和用户正式使用中的安装、培训工作等。</p>
</li>
<li>
<p>How</p>
</li>
</ul>
<figure data-type="image" tabindex="6"><img src="https://geniusmiaozz.github.io/post-images/1583338192371.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[30天自制操作系统-OSCodeFile学习笔记(1-7天内容)]]></title>
        <id>https://geniusmiaozz.github.io/post/geniusmiao-os-ge-dai-ma-wen-jian-jian-yao-shuo-ming/</id>
        <link href="https://geniusmiaozz.github.io/post/geniusmiao-os-ge-dai-ma-wen-jian-jian-yao-shuo-ming/">
        </link>
        <updated>2020-02-25T07:53:26.000Z</updated>
        <content type="html"><![CDATA[<h2 id="关键概念">关键概念</h2>
<ul>
<li>
<p>保存在磁盘上的操作系统主要分为启动区和程序区，每个区有自己的代码文件及引用的辅助文件（如字体数据、图片等）。主要系统文件通过Makefile文件链接在一起，构成操作系统。</p>
</li>
<li>
<p>一个操作系统其实就是许多二进制数组成的映像文件，一个二进制数可以理解为一个电信号。</p>
</li>
<li>
<p>在整个操作系统中，全局描述符表GDT只有一张（一个CPU对应一个GDT）。GDT可以被放在内存的任何位置，但CPU必须知道GDT的入口，也就是基地址放在哪里，Intel的设计者门提供了一个寄存器GDTR用来存放GDT的入口地址，程序员将GDT设定在内存中某个位置之后，可以通过LGDT指令将GDT的入口地址装入此积存器，从此以后，CPU就根据此寄存器中的内容作为GDT的入口来访问GDT了。GDTR中存放的是GDT在内存中的基地址和其表长界限。</p>
</li>
<li>
<p>如何令操作系统对鼠标与键盘这些外设的活动做出响应？首先要对GDT、IDT初始化，即将数据排列在内存的某个地方，然后将这个地方在内存中的位置的起始地址和有效设定个数写入GDTR/IDTR寄存器；然后PIC进行初始化，使CPU能够接受来自不同地方的中断信号；然后完成鼠标和键盘在IDT中的注册，如果鼠标键盘进行操作发生了中断，CPU会自动调用中断函数进行处理。</p>
</li>
</ul>
<h2 id="代码说明">代码说明</h2>
<h3 id="1makefile文件">1.Makefile文件</h3>
<ul>
<li>
<p>DAY_2：创建基础的Makefile文件，包含最基本的制作英雄、汇编、模拟运行、安装至软盘及相关清楚操作。</p>
</li>
<li>
<p>DAY_3：由于拆分了程序区文件，按照高级语言翻译到机器语言的规则（相关见书P60）修改了文件，且对于需要使用的关键路径及关键文件进行了定义，优化代码。</p>
</li>
<li>
<p>DAY_4：由于新增了OSASK字体信息文件，按照规则修改了文件，且对于需要使用的关键路径及关键文件进行了定义，优化代码。</p>
</li>
<li>
<p>DAY_6：分隔了Makefile文件，合并了对于后缀名相同、前缀名不同的文件的操作规则，优化代码;：由于新增了程序区文件，按照规则修改了文件，</p>
</li>
</ul>
<h3 id="2启动区代码">2.启动区代码</h3>
<blockquote>
<p><em>0x7c00-0x7dff为规定的启动区内容装载地址。(书P40)</em></p>
<ul>
<li>
<p>DAY_3</p>
<p>创建ipl10.nas，当前的整个启动区代码文件。</p>
</li>
</ul>
</blockquote>
<h4 id="ipl10nas">ipl10.nas</h4>
<ul>
<li>
<p>DAY_3：读盘，按扇区读依次读入每一个扇区（共计10个扇区），同时完成读入过程中的纠错工作。</p>
<p>启动区读盘完毕后JMP至0xc200号地址处。</p>
</li>
</ul>
<h3 id="3程序区代码">3.程序区代码</h3>
<blockquote>
<p><em>向一个空软盘保存文件时，文件的内容会写在磁盘上0x4200以后的地方。</em></p>
<p><em>磁盘上的内容装载到程序0x8000号地址，所以程序位于内存0x8000+0x4200=0xc200号地址。</em></p>
<p><em><strong>此处包含辅助文件，为了完成操作系统无需编写直接引用的文件。编写的文件标注为创建，引用的文件标注为添加。</strong></em></p>
<p><em><strong>删除线意为此项功能在实际项目中已经完成过，但在后续编写中删掉了该功能或在其基础上对其升级，完成了更高级的功能。</strong></em></p>
<ul>
<li>
<p>DAY_3</p>
<p>创建asmhead.nas，程序区代码的前半部分。</p>
<p>创建bookpack.c，程序区代码的后半部分。</p>
<p>创建naskfunc.nas，汇编完成的部分功能函数。</p>
</li>
<li>
<p>DAY_4</p>
<p>修改naskfunc.nas、bookpack.c。</p>
</li>
<li>
<p>DAY_5</p>
<p>添加hankaku.txt文件，OSASK字体信息文件。</p>
<p>修改naskfunc.nas、bookpack.c。</p>
</li>
<li>
<p>DAY_6</p>
<p>拆分bootpack.c为三个子文件：</p>
<p>创建graphic.c，包含程序区代码的后半部分的部分功能函数。</p>
<p>创建dsctbl.c，包含程序区代码的后半部分的部分功能函数。</p>
<p>创建新的bootpack.c，包含程序区代码的后半部分的主函数。</p>
<p>创建bootpack.h，将函数声明、变量生命、宏定义、头文件引用放置在.h头文件中，优化代码。</p>
<p>创建int.c，包含程序区代码的后半部分的部分功能函数。</p>
<p>修改naskfunc.nas。</p>
</li>
<li>
<p>DAY_7</p>
<p>创建fifo.c，包含自制FIFO缓冲区主要功能函数。</p>
<p>修改int.c。</p>
</li>
</ul>
</blockquote>
<h4 id="asmheadnas">asmhead.nas</h4>
<ul>
<li>
<p>DAY_3：设定好程序被装载到内存的位置，即ORG 0xc200，完成与启动区的链接。</p>
<p>新增的代码主要为与CPU有关的设定，此处尚未讲解。</p>
</li>
<li>
<p>DAY_4：设定启动区、颜色数目的信息、颜色位数、分辨率的X和Y、图形缓冲区的开始地址， 即完成设置画面模式并把画面模式的信息保存至内存，并用BIOS取得键盘上各种LED指示灯的状态。</p>
</li>
</ul>
<h4 id="naskfuncnas">naskfunc.nas</h4>
<ul>
<li>
<p>DAY_3：利用汇编完成实现暂停CPU功能的函数。</p>
</li>
<li>
<p>DAY_4：利用汇编完成部分函数，并与C函数链接。主要包含：</p>
<p>1.实现不同字节大小的内存写入。</p>
<p>2.中断标志的置位、复位。</p>
<p>3.中断标志位的压栈保存、弹栈读取。</p>
</li>
<li>
<p>DAY_5：利用汇编完成实现对GDTR、IDTR寄存器加载数据的函数。</p>
<p>GDTR与IDTR结构体基本一样。需要取第一个32位数据的低16位和第二个32位数据，合并作为一个48位数据存入寄存器。</p>
<p>MOV		AX,[ESP+6]      取第一个32位数据低16位数据地址<br>
MOV		[ESP+6],AX      第一个32位数据高16位的地址存入其低16位数据<br>
LGDT	[ESP+6]         第一个32位数高16位的地址开始的输入加载至寄存器</p>
</li>
<li>
<p>DAY_6：利用汇编完成中断处理完成之后的“返回”功能，<em><strong>C中的“return”相当于“RET”，此处需要“IRETD”的功能，故采用汇编实现，详见书P120。</strong></em></p>
</li>
</ul>
<h4 id="bookpackc">bookpack.c</h4>
<ul>
<li>
<p>DAY_3：无限调用汇编实现的暂停CPU功能函数，完成一个最基本的操作系统。</p>
</li>
<li>
<p>DAY_4：利用C完成部分函数，并与汇编函数链接。主要包含：</p>
<p>1.实现内存写入，指针实现。</p>
<p><s>2.利用内存写入实现条纹图案。</s></p>
<p><s>3.实现色号设定，选择利用到的16种颜色并编号，按照调色板的号码写入步骤（书P80）完成功能。</s></p>
<p><s>4.实现绘制矩形的函数，并绘制出一个基本界面及任务条(task bar)。</s></p>
</li>
<li>
<p>DAY_5：主要完善的功能：</p>
<p><s>1.利用指针保存画面模式信息的值，这些值应与asmhead.nas保持一致。</s></p>
<p>2.利用结构体保存画面模式信息的值，优化代码。</p>
<p>3.利用箭头记号直接获取结构体中成员的值，优化代码。</p>
<p><s>4.利用像素点阵的方法，即改变内存中若干个像素点的颜色，完成一个字符的显示。此处的函数原型：</s></p>
<blockquote>
<p>void putfont8(char *vram, int xsize, int x, int y, char c, char *font);</p>
<p>其中vram是图形缓冲区的开始地址，xsize是分辨率的X，x是绘制图形最左侧的X坐标，y是绘制图形最顶部的Y坐标，c是绘制的颜色，font是绘制图形的数据信息。</p>
</blockquote>
<p><s>5.利用像素点阵的方法，通过对字符数组的遍历，依次绘制每一个字符的图形，从而完成对整个字符串各字符图形的绘制。</s></p>
<p><s>6.利用像素点阵的方法和sprintf函数，以绘制图形的方式输出一个变量及其数值，有助于debug。</s></p>
<p><s>7.利用像素点阵的方法，完成一个鼠标指针图形的绘制。主要过程为：</s></p>
<blockquote>
<p>首先利用init_mouse_cursor8(char *mouse, char bc)，将鼠标图形的像素点颜色信息存入mouse开头的地址中（bc为背景色）。</p>
<p>然后利用void putblock8_8(char *vram, int vxsize, int pxsize,int pysize, int px0, int py0, char *buf, int bxsize)，vram和vxsize是关于VRAM的信息，pxsize和pysize是绘制图形的大小，px0和py0分别是图形左边的X坐标和图形右边的Y坐标，buf是待绘制图形的存放地址，bxsize是待绘制图像分辨率的X即每一行含有的像素数。</p>
</blockquote>
<p><s>8.利用类调色板初始化的思路对GDT和TDT进行初步初始化。</s></p>
</li>
<li>
<p>DAY_6：主要完善的功能：</p>
<p><em><strong>1.只保留主函数中对各功能的调用、变量及函数的生命，其余功能函数的具体实现分隔为两个文件graphic.c和dsctbl.c。</strong></em></p>
<p>2.修改了PIC的IMR，以便接受来自键盘和鼠标的中断。</p>
</li>
<li>
<p>DAY_7：主要完善的功能：</p>
<p>1.完成等待并检测键盘控制电路准备完毕的功能。</p>
<p>2.完成初始化键盘控制电路的功能。</p>
<p>3.完成激活鼠标的功能。</p>
<p>4.完成从鼠标获取数据的功能，如果二者缓冲区都为空，则执行HLT；如果有任一缓冲区不为空，则优先取键盘缓冲区数据出来显示。</p>
</li>
</ul>
<h4 id="hankakutxt">hankaku.txt</h4>
<ul>
<li>DAY_5：引入的辅助文件，为OSASK字体数据文件。</li>
</ul>
<h4 id="graphicc">graphic.c</h4>
<ul>
<li>
<p>DAY_6：主要完善的功能：</p>
<p>1.实现色号设定，选择利用到的16种颜色并编号，按照调色板的号码写入步骤（书P80）完成功能。</p>
<p>2.实现绘制矩形的函数，并绘制出一个基本界面及任务条(task bar)。</p>
<p>3.利用像素点阵的方法，即改变内存中若干个像素点的颜色，完成一个字符的显示。</p>
<p>4.利用像素点阵的方法，完成一个鼠标指针图形的绘制。</p>
</li>
</ul>
<h4 id="dsctblc">dsctbl.c</h4>
<ul>
<li>
<p>DAY_6：主要完善的功能：</p>
<p>1.利用类调色板初始化的思路对GDT和TDT进行初步初始化。</p>
<p>2.完成鼠标和键盘中断处理程序在IDT中的注册，即对段地址、段上限、段属性信息的赋值。</p>
</li>
</ul>
<h4 id="intc">int.c</h4>
<ul>
<li>
<p>DAY_6：主要完善的功能：</p>
<p>1.通过对不同端口的赋值来对PIC（可编程中断控制器）进行初始化，<em><strong>此处相较不易理解，详见书P117。</strong></em></p>
<p>2.利用C和汇编完成处理鼠标（IRQ12）和键盘（IRQ1）的中断，即中断发生时需要调用的程序。<em><strong>此处还需要处理IRQ7的中断处理程序，详见书P119。</strong></em></p>
<p><s>3.实现键盘按键发生中断时输出提示信息。</s></p>
</li>
<li>
<p>DAY_7：主要完善的功能：</p>
<p>1.实现多次执行键盘中断的功能。即在一次IRQ1中断发生后，使PIC继续监视IRQ1中断是否发生</p>
<p>2.实现在发生键盘中断时，输出按键编码的功能（从编号为0x0060的设备输入的8位信息是按键编码）。</p>
<p><s>3.利用移送数据实现FIFO（先进先出）缓冲区，能够输出正确的按键编码，避免两个字节的键码值被丢掉后一个。</s></p>
<p><s>4.利用读追赶写的方式实现FIFO缓冲区，当读写至末尾时进行归0处理，避免了数据的移送操作，优化性能。</s></p>
<p>4.完成处理鼠标中断的功能，<em><strong>分别通知从PIC中断IRQ12已完成和主PIC中断IRQ2已完成，书P142。</strong></em></p>
</li>
</ul>
<h4 id="fifoc">fifo.c</h4>
<ul>
<li>
<p>DAY_7：</p>
<p>1.为FIFO缓冲区增加首地址、下一个数据写入地址、写一个数据读出地址、缓冲区总字节数、缓冲区里没有数据的字节数、缓冲区是否溢出的表示结构体信息。</p>
<p>2.完成初始化FIFO缓冲区的功能。</p>
<p>3.完成向FIFO缓冲区传送数据并保存的功能。</p>
<p>4.完成从FIFO缓冲区获得一个字节数据的功能。</p>
<p>5.完成查看当前FIFO缓冲区存放了多少有效数据的功能。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcome here!]]></title>
        <id>https://geniusmiaozz.github.io/post/about/</id>
        <link href="https://geniusmiaozz.github.io/post/about/">
        </link>
        <updated>2019-01-25T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<h2 id="关于本站">🏠 关于本站</h2>
<p>知 无 不 言</p>
<h2 id="博主是谁">👨‍💻 博主是谁</h2>
<p>99年，天津人，性别男，爱好女。</p>
<h2 id="兴趣爱好">⛹ 兴趣爱好</h2>
<p>游戏，音乐，电影，电子竞技，心理学，哲学</p>
<h2 id="联系方式">📬 联系方式</h2>
<p>QQ:1208520869<br>
WeChat:miaomiao132465798<br>
邮箱:miaozijianzz@outlook.com</p>
]]></content>
    </entry>
</feed>